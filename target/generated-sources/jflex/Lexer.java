/* The following code was generated by JFlex 1.6.1 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/White/IdeaProjects/Trabalho - Refact/src/main/jflex/Lexer.jflex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\31\1\0\1\0\1\31\22\0\1\31\16\0\1\12\14\0"+
    "\1\1\1\0\1\11\1\32\1\0\1\3\1\25\1\21\1\2\1\6"+
    "\1\26\1\30\1\13\1\16\2\0\1\23\1\17\1\7\1\14\1\20"+
    "\1\0\1\10\1\15\1\4\1\27\1\22\1\0\1\24\6\0\1\5"+
    "\45\0\1\0\u1fa2\0\1\0\1\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\142\0\1\3\10\0\1\4"+
    "\51\0\1\5\2\0\1\6\11\0\1\7\50\0\1\10"+
    "\2\0\1\11\21\0\1\12\37\0\1\13\21\0\1\14"+
    "\1\15\12\0\1\16\22\0\1\17\1\20\14\0\1\21"+
    "\5\0\1\22\2\0\1\23\7\0\1\24\12\0\1\25"+
    "\4\0\1\26\13\0\1\27\4\0\1\30\2\0\1\31"+
    "\3\0\1\32\13\0\1\33\6\0\1\34\1\35\5\0"+
    "\1\36\5\0\1\37\5\0\1\40\5\0\1\41\1\42"+
    "\4\0\1\43\1\44\2\0\1\45\5\0\1\46\2\0"+
    "\1\47\1\50\2\0\1\51\1\0\1\52\4\0\1\53"+
    "\1\54\2\0\1\55\3\0\1\56\1\57\1\0\1\60"+
    "\3\0\1\61\1\62\1\0\1\63\1\64\1\65\1\0"+
    "\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\u017a\0\u0195"+
    "\0\u01b0\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0237\0\u0252\0\u026d"+
    "\0\u0288\0\u02a3\0\u02be\0\u02d9\0\u02f4\0\u030f\0\u032a\0\u0345"+
    "\0\u0360\0\u037b\0\u0396\0\u03b1\0\u03cc\0\u03e7\0\u0402\0\u041d"+
    "\0\u0438\0\u0453\0\u046e\0\u0489\0\u04a4\0\u04bf\0\u04da\0\u04f5"+
    "\0\u0510\0\u052b\0\u0546\0\u0561\0\u057c\0\u0597\0\u05b2\0\u05cd"+
    "\0\u05e8\0\u0603\0\u061e\0\u0639\0\u0654\0\u066f\0\u068a\0\u06a5"+
    "\0\u06c0\0\u06db\0\u06f6\0\u0711\0\u072c\0\u0747\0\u0762\0\u077d"+
    "\0\u0798\0\u07b3\0\u07ce\0\u07e9\0\u0804\0\u081f\0\u083a\0\u0855"+
    "\0\u0870\0\u088b\0\u08a6\0\u08c1\0\u08dc\0\u08f7\0\u0912\0\u092d"+
    "\0\u0948\0\u0963\0\u097e\0\u0999\0\u09b4\0\u09cf\0\u09ea\0\u0a05"+
    "\0\u0a20\0\u0a3b\0\u0a56\0\u0a71\0\u0a8c\0\u0aa7\0\u0ac2\0\u0add"+
    "\0\u0af8\0\u0b13\0\u0b2e\0\u0b49\0\u0b64\0\u0b7f\0\u0b9a\0\u0ac2"+
    "\0\u0bb5\0\u0bd0\0\u0beb\0\u0c06\0\u0c21\0\u0c3c\0\u0c57\0\u0c72"+
    "\0\u0c8d\0\u0ca8\0\u0cc3\0\u0cde\0\u0cf9\0\u0d14\0\u0d2f\0\u0d4a"+
    "\0\u0d65\0\u0d80\0\u0d9b\0\u0db6\0\u0dd1\0\u0dec\0\u0e07\0\u0e22"+
    "\0\u0e3d\0\u0e58\0\u0e73\0\u0e8e\0\u0ea9\0\u0ec4\0\u0edf\0\u0efa"+
    "\0\u0f15\0\u0f30\0\u0f4b\0\u0f66\0\u0f81\0\u0f9c\0\u0fb7\0\u0fd2"+
    "\0\u0fed\0\u0ac2\0\u1008\0\u1023\0\u0ac2\0\u103e\0\u1059\0\u1074"+
    "\0\u108f\0\u10aa\0\u10c5\0\u10e0\0\u10fb\0\u1116\0\u0ac2\0\u1131"+
    "\0\u114c\0\u1167\0\u1182\0\u119d\0\u11b8\0\u11d3\0\u11ee\0\u1209"+
    "\0\u1224\0\u123f\0\u125a\0\u1275\0\u1290\0\u12ab\0\u12c6\0\u12e1"+
    "\0\u12fc\0\u1317\0\u1332\0\u134d\0\u1368\0\u1383\0\u139e\0\u13b9"+
    "\0\u13d4\0\u13ef\0\u140a\0\u1425\0\u1440\0\u145b\0\u1476\0\u1491"+
    "\0\u14ac\0\u14c7\0\u14e2\0\u14fd\0\u1518\0\u1533\0\u154e\0\u0ac2"+
    "\0\u1569\0\u1584\0\u0ac2\0\u159f\0\u15ba\0\u15d5\0\u15f0\0\u160b"+
    "\0\u1626\0\u1641\0\u165c\0\u1677\0\u1692\0\u16ad\0\u16c8\0\u16e3"+
    "\0\u16fe\0\u1719\0\u1734\0\u174f\0\u0ac2\0\u176a\0\u1785\0\u17a0"+
    "\0\u17bb\0\u17d6\0\u17f1\0\u180c\0\u1827\0\u1842\0\u185d\0\u1878"+
    "\0\u1893\0\u18ae\0\u18c9\0\u18e4\0\u18ff\0\u191a\0\u1935\0\u1950"+
    "\0\u196b\0\u1986\0\u19a1\0\u19bc\0\u19d7\0\u19f2\0\u1a0d\0\u1a28"+
    "\0\u1a43\0\u1a5e\0\u1a79\0\u1a94\0\u0ac2\0\u1aaf\0\u1aca\0\u1ae5"+
    "\0\u1b00\0\u1b1b\0\u1b36\0\u1b51\0\u1b6c\0\u1b87\0\u1ba2\0\u1bbd"+
    "\0\u1bd8\0\u1bf3\0\u1c0e\0\u1c29\0\u1c44\0\u1c5f\0\u0ac2\0\u0ac2"+
    "\0\u1c7a\0\u1c95\0\u1cb0\0\u1ccb\0\u1ce6\0\u1d01\0\u1d1c\0\u1d37"+
    "\0\u1d52\0\u1d6d\0\u0ac2\0\u1d88\0\u1da3\0\u1dbe\0\u1dd9\0\u1df4"+
    "\0\u1e0f\0\u1e2a\0\u1e45\0\u1e60\0\u1e7b\0\u1e96\0\u1eb1\0\u1ecc"+
    "\0\u1ee7\0\u1f02\0\u1f1d\0\u1f38\0\u1f53\0\u0ac2\0\u0ac2\0\u1f6e"+
    "\0\u1f89\0\u1fa4\0\u1fbf\0\u1fda\0\u1ff5\0\u2010\0\u202b\0\u2046"+
    "\0\u2061\0\u207c\0\u2097\0\u0ac2\0\u20b2\0\u20cd\0\u20e8\0\u2103"+
    "\0\u211e\0\u0ac2\0\u2139\0\u2154\0\u0ac2\0\u216f\0\u218a\0\u21a5"+
    "\0\u21c0\0\u21db\0\u21f6\0\u2211\0\u0ac2\0\u222c\0\u2247\0\u2262"+
    "\0\u227d\0\u2298\0\u22b3\0\u22ce\0\u22e9\0\u2304\0\u231f\0\u0ac2"+
    "\0\u233a\0\u2355\0\u2370\0\u238b\0\u0ac2\0\u23a6\0\u23c1\0\u23dc"+
    "\0\u23f7\0\u2412\0\u242d\0\u2448\0\u2463\0\u247e\0\u2499\0\u24b4"+
    "\0\u0ac2\0\u24cf\0\u24ea\0\u2505\0\u2520\0\u0ac2\0\u253b\0\u2556"+
    "\0\u0ac2\0\u2571\0\u258c\0\u25a7\0\u0ac2\0\u25c2\0\u25dd\0\u25f8"+
    "\0\u2613\0\u262e\0\u2649\0\u2664\0\u267f\0\u269a\0\u26b5\0\u26d0"+
    "\0\u0ac2\0\u26eb\0\u2706\0\u2721\0\u273c\0\u2757\0\u2772\0\u0ac2"+
    "\0\u0ac2\0\u278d\0\u27a8\0\u27c3\0\u27de\0\u27f9\0\u0ac2\0\u2814"+
    "\0\u282f\0\u284a\0\u2865\0\u2880\0\u0ac2\0\u289b\0\u28b6\0\u28d1"+
    "\0\u28ec\0\u2907\0\u0ac2\0\u2922\0\u293d\0\u2958\0\u2973\0\u298e"+
    "\0\u0ac2\0\u0ac2\0\u29a9\0\u29c4\0\u29df\0\u29fa\0\u0ac2\0\u0ac2"+
    "\0\u2a15\0\u2a30\0\u0ac2\0\u2a4b\0\u2a66\0\u2a81\0\u2a9c\0\u2ab7"+
    "\0\u0ac2\0\u2ad2\0\u2aed\0\u0ac2\0\u0ac2\0\u2b08\0\u2b23\0\u0ac2"+
    "\0\u2b3e\0\u0ac2\0\u2b59\0\u2b74\0\u2b8f\0\u2baa\0\u0ac2\0\u0ac2"+
    "\0\u2bc5\0\u2be0\0\u0ac2\0\u2bfb\0\u2c16\0\u2c31\0\u0ac2\0\u0ac2"+
    "\0\u2c4c\0\u0ac2\0\u2c67\0\u2c82\0\u2c9d\0\u0ac2\0\u0ac2\0\u2cb8"+
    "\0\u0ac2\0\u0ac2\0\u0ac2\0\u2cd3\0\u0ac2\0\u0ac2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\27\2\1\4\2\2\1\0\31\2\2\0"+
    "\1\5\1\0\1\6\1\0\1\7\1\10\1\11\1\0"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\0\1\20"+
    "\1\21\1\22\6\0\1\23\1\2\1\0\27\2\1\4"+
    "\1\2\3\0\1\24\32\0\1\25\4\0\1\26\3\0"+
    "\1\27\1\0\1\30\23\0\1\31\14\0\1\32\22\0"+
    "\1\33\1\0\1\34\22\0\1\35\26\0\1\36\1\0"+
    "\1\37\1\0\1\40\1\41\1\42\2\0\1\43\1\44"+
    "\1\45\1\46\1\47\1\0\1\50\1\51\1\52\23\0"+
    "\1\53\36\0\1\54\15\0\1\55\31\0\1\56\14\0"+
    "\1\57\16\0\1\60\2\0\1\61\5\0\1\62\21\0"+
    "\1\63\10\0\1\64\6\0\1\65\12\0\1\66\43\0"+
    "\1\67\16\0\11\70\1\0\21\70\4\0\1\71\52\0"+
    "\1\72\11\0\1\73\33\0\1\74\46\0\1\75\16\0"+
    "\1\76\32\0\1\77\45\0\1\100\41\0\1\101\32\0"+
    "\1\102\7\0\1\103\32\0\1\104\4\0\1\105\3\0"+
    "\1\106\1\0\1\107\23\0\1\110\14\0\1\111\22\0"+
    "\1\112\1\0\1\113\22\0\1\114\40\0\1\115\36\0"+
    "\1\116\15\0\1\117\31\0\1\120\14\0\1\121\16\0"+
    "\1\122\2\0\1\123\5\0\1\124\21\0\1\125\10\0"+
    "\1\126\6\0\1\127\12\0\1\130\43\0\1\131\26\0"+
    "\1\132\30\0\1\133\42\0\1\134\22\0\1\135\44\0"+
    "\1\136\16\0\1\137\43\0\1\140\25\0\1\141\32\0"+
    "\1\142\24\0\1\143\46\0\1\144\37\0\1\145\30\0"+
    "\1\146\11\0\11\70\1\147\21\70\3\0\1\150\32\0"+
    "\1\151\36\0\1\152\26\0\1\153\43\0\1\154\26\0"+
    "\1\155\32\0\1\156\30\0\1\157\35\0\1\160\26\0"+
    "\1\161\31\0\1\162\52\0\1\163\11\0\1\164\33\0"+
    "\1\165\46\0\1\166\16\0\1\167\32\0\1\170\45\0"+
    "\1\171\41\0\1\172\32\0\1\173\14\0\1\174\30\0"+
    "\1\175\42\0\1\176\22\0\1\177\44\0\1\200\16\0"+
    "\1\201\43\0\1\202\25\0\1\203\32\0\1\204\24\0"+
    "\1\205\46\0\1\206\37\0\1\207\30\0\1\210\14\0"+
    "\1\211\37\0\1\212\24\0\1\213\37\0\1\214\37\0"+
    "\1\215\26\0\1\216\27\0\1\217\30\0\1\220\33\0"+
    "\1\221\44\0\1\222\22\0\1\223\40\0\1\224\21\0"+
    "\1\225\67\0\1\226\32\0\1\227\42\0\1\230\40\0"+
    "\1\231\20\0\1\232\24\0\1\233\32\0\1\234\40\0"+
    "\1\235\41\0\1\236\15\0\1\237\32\0\1\240\36\0"+
    "\1\241\26\0\1\242\43\0\1\243\26\0\1\244\32\0"+
    "\1\245\30\0\1\246\35\0\1\247\26\0\1\250\30\0"+
    "\1\251\37\0\1\252\24\0\1\253\37\0\1\254\37\0"+
    "\1\255\26\0\1\256\27\0\1\257\30\0\1\260\33\0"+
    "\1\261\44\0\1\262\22\0\1\263\40\0\1\264\21\0"+
    "\1\265\34\0\1\266\30\0\1\267\32\0\1\270\33\0"+
    "\1\271\36\0\1\272\40\0\1\273\22\0\1\274\26\0"+
    "\1\275\33\0\1\276\57\0\1\277\11\0\1\300\33\0"+
    "\1\301\45\0\1\302\11\0\1\303\3\0\1\304\6\0"+
    "\1\305\33\0\1\306\17\0\1\307\34\0\1\310\27\0"+
    "\1\311\51\0\1\312\14\0\1\313\34\0\1\314\32\0"+
    "\1\315\42\0\1\316\40\0\1\317\20\0\1\320\24\0"+
    "\1\321\32\0\1\322\40\0\1\323\41\0\1\324\17\0"+
    "\1\325\30\0\1\326\32\0\1\327\33\0\1\330\36\0"+
    "\1\331\40\0\1\332\22\0\1\333\26\0\1\334\33\0"+
    "\1\335\57\0\1\336\11\0\1\337\33\0\1\340\45\0"+
    "\1\341\15\0\1\342\6\0\1\343\17\0\1\344\41\0"+
    "\1\345\37\0\1\346\20\0\1\347\47\0\1\350\30\0"+
    "\1\351\16\0\1\352\43\0\1\353\32\0\1\354\22\0"+
    "\1\355\33\0\1\356\43\0\1\357\22\0\1\360\33\0"+
    "\1\361\26\0\1\362\51\0\1\363\31\0\1\364\27\0"+
    "\1\365\17\0\1\366\33\0\1\367\56\0\1\370\4\0"+
    "\1\371\3\0\1\372\6\0\1\373\33\0\1\374\17\0"+
    "\1\375\34\0\1\376\27\0\1\377\51\0\1\u0100\14\0"+
    "\1\u0101\35\0\1\u0102\6\0\1\u0103\17\0\1\u0104\41\0"+
    "\1\u0105\37\0\1\u0106\20\0\1\u0107\47\0\1\u0108\30\0"+
    "\1\u0109\16\0\1\u010a\43\0\1\u010b\32\0\1\u010c\22\0"+
    "\1\u010d\33\0\1\u010e\43\0\1\u010f\23\0\1\u0110\26\0"+
    "\1\u0111\43\0\1\u0112\44\0\1\u0113\7\0\1\u0114\56\0"+
    "\1\u0115\21\0\1\u0116\25\0\1\u0117\32\0\1\u0118\26\0"+
    "\1\u0119\33\0\1\u011a\26\0\1\u011b\32\0\1\u011c\55\0"+
    "\1\u011d\11\0\1\u011e\44\0\1\u011f\17\0\1\u0120\50\0"+
    "\1\u0121\33\0\1\u0122\21\0\1\u0123\35\0\1\u0124\21\0"+
    "\1\u0125\35\0\1\u0126\33\0\1\u0127\26\0\1\u0128\51\0"+
    "\1\u0129\31\0\1\u012a\27\0\1\u012b\17\0\1\u012c\33\0"+
    "\1\u012d\56\0\1\u012e\11\0\1\u012f\26\0\1\u0130\43\0"+
    "\1\u0131\44\0\1\u0132\7\0\1\u0133\56\0\1\u0134\21\0"+
    "\1\u0135\25\0\1\u0136\32\0\1\u0137\26\0\1\u0138\33\0"+
    "\1\u0139\26\0\1\u013a\32\0\1\u013b\34\0\1\u013c\44\0"+
    "\1\u013d\24\0\1\u013e\40\0\1\u013f\23\0\1\u0140\46\0"+
    "\1\u0141\24\0\1\u0142\35\0\1\u0143\23\0\1\u0144\27\0"+
    "\1\u0145\27\0\1\u0146\45\0\1\u0147\24\0\1\u0148\24\0"+
    "\1\u0149\41\0\1\u014a\24\0\1\u014b\32\0\1\u014c\40\0"+
    "\1\u014d\40\0\1\u014e\40\0\1\u014f\11\0\1\u0150\44\0"+
    "\1\u0151\17\0\1\u0152\50\0\1\u0153\33\0\1\u0154\21\0"+
    "\1\u0155\35\0\1\u0156\21\0\1\u0157\33\0\1\u0158\44\0"+
    "\1\u0159\24\0\1\u015a\40\0\1\u015b\23\0\1\u015c\46\0"+
    "\1\u015d\24\0\1\u015e\35\0\1\u015f\23\0\1\u0160\27\0"+
    "\1\u0161\27\0\1\u0162\37\0\1\u0163\24\0\1\u0164\41\0"+
    "\1\u0165\42\0\1\u0166\32\0\1\u0167\14\0\1\u0168\44\0"+
    "\1\u0169\31\0\1\u016a\33\0\1\u016b\17\0\1\u016c\34\0"+
    "\1\u016d\31\0\1\u016e\32\0\1\u016f\43\0\1\u0170\27\0"+
    "\1\u0171\27\0\1\u0172\42\0\1\u0173\24\0\1\u0174\24\0"+
    "\1\u0175\41\0\1\u0176\24\0\1\u0177\32\0\1\u0178\40\0"+
    "\1\u0179\40\0\1\u017a\23\0\1\u017b\24\0\1\u017c\41\0"+
    "\1\u017d\42\0\1\u017e\32\0\1\u017f\14\0\1\u0180\44\0"+
    "\1\u0181\31\0\1\u0182\33\0\1\u0183\17\0\1\u0184\33\0"+
    "\1\u0185\32\0\1\u0186\32\0\1\u0187\45\0\1\u0188\25\0"+
    "\1\u0189\24\0\1\u018a\44\0\1\u018b\36\0\1\u018c\17\0"+
    "\1\u018d\40\0\1\u018e\20\0\1\u018f\41\0\1\u0190\32\0"+
    "\1\u0191\30\0\1\u0192\27\0\1\u0193\31\0\1\u0194\32\0"+
    "\1\u0195\43\0\1\u0196\27\0\1\u0197\27\0\1\u0198\27\0"+
    "\1\u0199\32\0\1\u019a\32\0\1\u019b\45\0\1\u019c\25\0"+
    "\1\u019d\24\0\1\u019e\44\0\1\u019f\36\0\1\u01a0\17\0"+
    "\1\u01a1\26\0\1\u01a2\41\0\1\u01a3\23\0\1\u01a4\33\0"+
    "\1\u01a5\43\0\1\u01a6\22\0\1\u01a7\42\0\1\u01a8\27\0"+
    "\1\u01a9\32\0\1\u01aa\24\0\1\u01ab\33\0\1\u01ac\42\0"+
    "\1\u01ad\20\0\1\u01ae\41\0\1\u01af\32\0\1\u01b0\30\0"+
    "\1\u01b1\25\0\1\u01b2\41\0\1\u01b3\23\0\1\u01b4\33\0"+
    "\1\u01b5\43\0\1\u01b6\22\0\1\u01b7\42\0\1\u01b8\27\0"+
    "\1\u01b9\24\0\1\u01ba\43\0\1\u01bb\27\0\1\u01bc\32\0"+
    "\1\u01bd\24\0\1\u01be\36\0\1\u01bf\34\0\1\u01c0\35\0"+
    "\1\u01c1\27\0\1\u01c2\24\0\1\u01c3\33\0\1\u01c4\31\0"+
    "\1\u01c5\43\0\1\u01c6\27\0\1\u01c7\32\0\1\u01c8\24\0"+
    "\1\u01c9\36\0\1\u01ca\34\0\1\u01cb\31\0\1\u01cc\45\0"+
    "\1\u01cd\13\0\1\u01ce\37\0\1\u01cf\32\0\1\u01d0\35\0"+
    "\1\u01d1\27\0\1\u01d2\31\0\1\u01d3\45\0\1\u01d4\13\0"+
    "\1\u01d5\37\0\1\u01d6\32\0\1\u01d7\35\0\1\u01d8\27\0"+
    "\1\u01d9\32\0\1\u01da\32\0\1\u01db\35\0\1\u01dc\27\0"+
    "\1\u01dd\32\0\1\u01de\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11502];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\142\0\1\11\10\0\1\11\51\0\1\11"+
    "\2\0\1\11\11\0\1\11\50\0\1\11\2\0\1\11"+
    "\21\0\1\11\37\0\1\11\21\0\2\11\12\0\1\11"+
    "\22\0\2\11\14\0\1\11\5\0\1\11\2\0\1\11"+
    "\7\0\1\11\12\0\1\11\4\0\1\11\13\0\1\11"+
    "\4\0\1\11\2\0\1\11\3\0\1\11\13\0\1\11"+
    "\6\0\2\11\5\0\1\11\5\0\1\11\5\0\1\11"+
    "\5\0\2\11\4\0\2\11\2\0\1\11\5\0\1\11"+
    "\2\0\2\11\2\0\1\11\1\0\1\11\4\0\2\11"+
    "\2\0\1\11\3\0\2\11\1\0\1\11\3\0\2\11"+
    "\1\0\3\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Parser yyparser;

    /*Constructor que associa o Parser ao Lexer*/
    public Lexer(java.io.Reader r, Parser yyparser){
        this(r);
        this.yyparser = yyparser;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yyparser.yylval = new ParserVal(yytext());
                       return ParserTokens.TEXT;
            }
          case 56: break;
          case 2: 
            { return 1;
            }
          case 57: break;
          case 3: 
            { /* ignore */
            }
          case 58: break;
          case 4: 
            { return ParserTokens.O_NIF;
            }
          case 59: break;
          case 5: 
            { return ParserTokens.O_TIPO;
            }
          case 60: break;
          case 6: 
            { return ParserTokens.O_NOME;
            }
          case 61: break;
          case 7: 
            { return ParserTokens.C_NIF;
            }
          case 62: break;
          case 8: 
            { return ParserTokens.C_TIPO;
            }
          case 63: break;
          case 9: 
            { return ParserTokens.C_NOME;
            }
          case 64: break;
          case 10: 
            { return ParserTokens.O_SAIDA;
            }
          case 65: break;
          case 11: 
            { return ParserTokens.C_SAIDA;
            }
          case 66: break;
          case 12: 
            { return ParserTokens.O_MORADA;
            }
          case 67: break;
          case 13: 
            { return ParserTokens.O_CARTAO;
            }
          case 68: break;
          case 14: 
            { return ParserTokens.O_ENTRADA;
            }
          case 69: break;
          case 15: 
            { return ParserTokens.C_MORADA;
            }
          case 70: break;
          case 16: 
            { return ParserTokens.C_CARTAO;
            }
          case 71: break;
          case 17: 
            { return ParserTokens.O_CLIENTE;
            }
          case 72: break;
          case 18: 
            { return ParserTokens.O_TAXA_IVA;
            }
          case 73: break;
          case 19: 
            { return ParserTokens.O_EXTRACTO;
            }
          case 74: break;
          case 20: 
            { return ParserTokens.C_ENTRADA;
            }
          case 75: break;
          case 21: 
            { return ParserTokens.C_CLIENTE;
            }
          case 76: break;
          case 22: 
            { return ParserTokens.O_OPERADOR;
            }
          case 77: break;
          case 23: 
            { return ParserTokens.O_TOTAL_IVA;
            }
          case 78: break;
          case 24: 
            { return ParserTokens.C_TAXA_IVA;
            }
          case 79: break;
          case 25: 
            { return ParserTokens.C_EXTRACTO;
            }
          case 80: break;
          case 26: 
            { return ParserTokens.C_OPERADOR;
            }
          case 81: break;
          case 27: 
            { return ParserTokens.O_MATRICULA;
            }
          case 82: break;
          case 28: 
            { return ParserTokens.O_DATA_SAIDA;
            }
          case 83: break;
          case 29: 
            { return ParserTokens.O_TRANSACCAO;
            }
          case 84: break;
          case 30: 
            { return ParserTokens.C_TOTAL_IVA;
            }
          case 85: break;
          case 31: 
            { return ParserTokens.C_MATRICULA;
            }
          case 86: break;
          case 32: 
            { return ParserTokens.O_HORA_SAIDA;
            }
          case 87: break;
          case 33: 
            { return ParserTokens.O_LOCALIDADE;
            }
          case 88: break;
          case 34: 
            { return ParserTokens.O_DATA_DEBITO;
            }
          case 89: break;
          case 35: 
            { return ParserTokens.C_DATA_SAIDA;
            }
          case 90: break;
          case 36: 
            { return ParserTokens.C_TRANSACCAO;
            }
          case 91: break;
          case 37: 
            { return ParserTokens.C_HORA_SAIDA;
            }
          case 92: break;
          case 38: 
            { return ParserTokens.C_LOCALIDADE;
            }
          case 93: break;
          case 39: 
            { return ParserTokens.O_IMPORTANCIA;
            }
          case 94: break;
          case 40: 
            { return ParserTokens.O_MES_EMISSAO;
            }
          case 95: break;
          case 41: 
            { return ParserTokens.O_DATA_ENTRADA;
            }
          case 96: break;
          case 42: 
            { return ParserTokens.C_DATA_DEBITO;
            }
          case 97: break;
          case 43: 
            { return ParserTokens.C_IMPORTANCIA;
            }
          case 98: break;
          case 44: 
            { return ParserTokens.C_MES_EMISSAO;
            }
          case 99: break;
          case 45: 
            { return ParserTokens.O_HORA_ENTRADA;
            }
          case 100: break;
          case 46: 
            { return ParserTokens.O_REF_PAGAMENTO;
            }
          case 101: break;
          case 47: 
            { return ParserTokens.C_DATA_ENTRADA;
            }
          case 102: break;
          case 48: 
            { return ParserTokens.C_HORA_ENTRADA;
            }
          case 103: break;
          case 49: 
            { return ParserTokens.O_IDENTIFICADOR;
            }
          case 104: break;
          case 50: 
            { return ParserTokens.O_CODIGO_POSTAL;
            }
          case 105: break;
          case 51: 
            { return ParserTokens.C_REF_PAGAMENTO;
            }
          case 106: break;
          case 52: 
            { return ParserTokens.C_IDENTIFICADOR;
            }
          case 107: break;
          case 53: 
            { return ParserTokens.C_CODIGO_POSTAL;
            }
          case 108: break;
          case 54: 
            { return ParserTokens.O_VALOR_DESCONTO;
            }
          case 109: break;
          case 55: 
            { return ParserTokens.C_VALOR_DESCONTO;
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

/* The following code was generated by JFlex 1.6.1 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/White/IdeaProjects/Trabalho/src/main/jflex/Lexer.jflex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\27\1\0\1\0\1\27\22\0\1\27\16\0\1\12\14\0"+
    "\1\1\1\0\1\11\1\30\1\0\1\3\1\25\1\21\1\2\1\6"+
    "\2\0\1\13\1\16\2\0\1\23\1\17\1\7\1\14\1\20\1\0"+
    "\1\10\1\15\1\4\1\26\1\22\1\0\1\24\6\0\1\5\45\0"+
    "\1\0\u1fa2\0\1\0\1\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\73\0\1\3\33\0\1\4"+
    "\35\0\1\5\13\0\1\6\23\0\1\7\11\0\1\10"+
    "\6\0\1\11\13\0\1\12\12\0\1\13\6\0\1\14"+
    "\10\0\1\15\12\0\1\16\3\0\1\17\6\0\1\20"+
    "\3\0\1\21\1\22\7\0\1\23\2\0\1\24\2\0"+
    "\1\25\3\0\1\26\1\27\1\0\1\30\3\0\1\31"+
    "\1\0\1\32\1\33\2\0\1\34\1\0\1\35\1\0"+
    "\1\36\1\37\3\0\1\40\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\62\0\113\0\144\0\175\0\226\0\257"+
    "\0\310\0\341\0\372\0\u0113\0\u012c\0\u0145\0\u015e\0\u0177"+
    "\0\u0190\0\u01a9\0\u01c2\0\u01db\0\u01f4\0\u020d\0\u0226\0\u023f"+
    "\0\u0258\0\u0271\0\u028a\0\u02a3\0\u02bc\0\u02d5\0\u02ee\0\u0307"+
    "\0\u0320\0\u0339\0\u0352\0\u036b\0\u0384\0\u039d\0\u03b6\0\u03cf"+
    "\0\u03e8\0\u0401\0\u041a\0\u0433\0\u044c\0\u0465\0\u047e\0\u0497"+
    "\0\u04b0\0\u04c9\0\u04e2\0\u04fb\0\u0514\0\u052d\0\u0546\0\u055f"+
    "\0\u0578\0\u0591\0\u05aa\0\u05c3\0\u05dc\0\u05f5\0\u060e\0\u0627"+
    "\0\u0640\0\u0659\0\u0672\0\u068b\0\u06a4\0\u06bd\0\u06d6\0\u06ef"+
    "\0\u0708\0\u0721\0\u073a\0\u0753\0\u076c\0\u0785\0\u079e\0\u07b7"+
    "\0\u07d0\0\u07e9\0\u0802\0\u081b\0\u0834\0\u084d\0\u0866\0\u087f"+
    "\0\u0898\0\u08b1\0\u08ca\0\u0627\0\u08e3\0\u08fc\0\u0915\0\u092e"+
    "\0\u0947\0\u0960\0\u0979\0\u0992\0\u09ab\0\u09c4\0\u09dd\0\u09f6"+
    "\0\u0a0f\0\u0a28\0\u0a41\0\u0a5a\0\u0a73\0\u0a8c\0\u0aa5\0\u0abe"+
    "\0\u0ad7\0\u0af0\0\u0b09\0\u0b22\0\u0b3b\0\u0b54\0\u0b6d\0\u0b86"+
    "\0\u0b9f\0\u0627\0\u0bb8\0\u0bd1\0\u0bea\0\u0c03\0\u0c1c\0\u0c35"+
    "\0\u0c4e\0\u0c67\0\u0c80\0\u0c99\0\u0cb2\0\u0627\0\u0ccb\0\u0ce4"+
    "\0\u0cfd\0\u0d16\0\u0d2f\0\u0d48\0\u0d61\0\u0d7a\0\u0d93\0\u0dac"+
    "\0\u0dc5\0\u0dde\0\u0df7\0\u0e10\0\u0e29\0\u0e42\0\u0e5b\0\u0e74"+
    "\0\u0e8d\0\u0627\0\u0ea6\0\u0ebf\0\u0ed8\0\u0ef1\0\u0f0a\0\u0f23"+
    "\0\u0f3c\0\u0f55\0\u0f6e\0\u0627\0\u0f87\0\u0fa0\0\u0fb9\0\u0fd2"+
    "\0\u0feb\0\u1004\0\u0627\0\u101d\0\u1036\0\u104f\0\u1068\0\u1081"+
    "\0\u109a\0\u10b3\0\u10cc\0\u10e5\0\u10fe\0\u1117\0\u0627\0\u1130"+
    "\0\u1149\0\u1162\0\u117b\0\u1194\0\u11ad\0\u11c6\0\u11df\0\u11f8"+
    "\0\u1211\0\u0627\0\u122a\0\u1243\0\u125c\0\u1275\0\u128e\0\u12a7"+
    "\0\u0627\0\u12c0\0\u12d9\0\u12f2\0\u130b\0\u1324\0\u133d\0\u1356"+
    "\0\u136f\0\u0627\0\u1388\0\u13a1\0\u13ba\0\u13d3\0\u13ec\0\u1405"+
    "\0\u141e\0\u1437\0\u1450\0\u1469\0\u0627\0\u1482\0\u149b\0\u14b4"+
    "\0\u0627\0\u14cd\0\u14e6\0\u14ff\0\u1518\0\u1531\0\u154a\0\u0627"+
    "\0\u1563\0\u157c\0\u1595\0\u0627\0\u0627\0\u15ae\0\u15c7\0\u15e0"+
    "\0\u15f9\0\u1612\0\u162b\0\u1644\0\u0627\0\u165d\0\u1676\0\u0627"+
    "\0\u168f\0\u16a8\0\u0627\0\u16c1\0\u16da\0\u16f3\0\u0627\0\u0627"+
    "\0\u170c\0\u0627\0\u1725\0\u173e\0\u1757\0\u0627\0\u1770\0\u0627"+
    "\0\u0627\0\u1789\0\u17a2\0\u0627\0\u17bb\0\u0627\0\u17d4\0\u0627"+
    "\0\u0627\0\u17ed\0\u1806\0\u181f\0\u0627\0\u0627";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\25\2\1\4\2\2\1\0\27\2\2\0"+
    "\1\5\1\0\1\6\1\0\1\7\3\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\0\1\16\1\17\5\0"+
    "\1\20\1\2\1\0\25\2\1\4\1\2\3\0\1\21"+
    "\30\0\1\22\4\0\1\23\5\0\1\24\21\0\1\25"+
    "\23\0\1\26\1\0\1\27\1\0\1\30\4\0\1\31"+
    "\1\32\1\33\1\34\1\35\1\0\1\36\1\37\22\0"+
    "\1\40\34\0\1\41\13\0\1\42\44\0\1\43\14\0"+
    "\1\44\30\0\1\45\30\0\1\46\25\0\11\47\1\0"+
    "\17\47\4\0\1\50\50\0\1\51\7\0\1\52\45\0"+
    "\1\53\14\0\1\54\27\0\1\55\30\0\1\56\4\0"+
    "\1\57\5\0\1\60\21\0\1\61\35\0\1\62\34\0"+
    "\1\63\13\0\1\64\44\0\1\65\14\0\1\66\30\0"+
    "\1\67\30\0\1\70\35\0\1\71\26\0\1\72\40\0"+
    "\1\73\32\0\1\74\14\0\1\75\34\0\1\76\43\0"+
    "\1\77\5\0\11\47\1\100\17\47\3\0\1\101\30\0"+
    "\1\102\34\0\1\103\35\0\1\104\24\0\1\105\24\0"+
    "\1\106\50\0\1\107\7\0\1\110\45\0\1\111\14\0"+
    "\1\112\34\0\1\113\26\0\1\114\40\0\1\115\32\0"+
    "\1\116\14\0\1\117\34\0\1\120\43\0\1\121\10\0"+
    "\1\122\35\0\1\123\22\0\1\124\42\0\1\125\24\0"+
    "\1\126\24\0\1\127\40\0\1\130\52\0\1\131\30\0"+
    "\1\132\40\0\1\133\24\0\1\134\22\0\1\135\30\0"+
    "\1\136\30\0\1\137\34\0\1\140\35\0\1\141\24\0"+
    "\1\142\23\0\1\143\35\0\1\144\22\0\1\145\42\0"+
    "\1\146\24\0\1\147\24\0\1\150\40\0\1\151\21\0"+
    "\1\152\26\0\1\153\30\0\1\154\35\0\1\155\36\0"+
    "\1\156\15\0\1\157\35\0\1\160\22\0\1\161\3\0"+
    "\1\162\6\0\1\163\31\0\1\164\15\0\1\165\27\0"+
    "\1\166\33\0\1\167\30\0\1\170\40\0\1\171\24\0"+
    "\1\172\22\0\1\173\32\0\1\174\26\0\1\175\30\0"+
    "\1\176\35\0\1\177\36\0\1\200\15\0\1\201\35\0"+
    "\1\202\26\0\1\203\6\0\1\204\15\0\1\205\37\0"+
    "\1\206\23\0\1\207\45\0\1\210\23\0\1\211\21\0"+
    "\1\212\31\0\1\213\31\0\1\214\24\0\1\215\47\0"+
    "\1\216\27\0\1\217\12\0\1\220\27\0\1\221\3\0"+
    "\1\222\6\0\1\223\31\0\1\224\15\0\1\225\27\0"+
    "\1\226\34\0\1\227\6\0\1\230\15\0\1\231\37\0"+
    "\1\232\23\0\1\233\45\0\1\234\23\0\1\235\21\0"+
    "\1\236\32\0\1\237\24\0\1\240\41\0\1\241\17\0"+
    "\1\242\53\0\1\243\13\0\1\244\21\0\1\245\53\0"+
    "\1\246\7\0\1\247\42\0\1\250\15\0\1\251\46\0"+
    "\1\252\20\0\1\253\25\0\1\254\31\0\1\255\24\0"+
    "\1\256\47\0\1\257\27\0\1\260\12\0\1\261\34\0"+
    "\1\262\24\0\1\263\41\0\1\264\17\0\1\265\53\0"+
    "\1\266\13\0\1\267\21\0\1\270\32\0\1\271\42\0"+
    "\1\272\22\0\1\273\27\0\1\274\44\0\1\275\13\0"+
    "\1\276\40\0\1\277\22\0\1\300\22\0\1\301\37\0"+
    "\1\302\22\0\1\303\52\0\1\304\7\0\1\305\42\0"+
    "\1\306\15\0\1\307\46\0\1\310\20\0\1\311\23\0"+
    "\1\312\42\0\1\313\22\0\1\314\27\0\1\315\44\0"+
    "\1\316\13\0\1\317\32\0\1\320\22\0\1\321\37\0"+
    "\1\322\40\0\1\323\12\0\1\324\42\0\1\325\17\0"+
    "\1\326\27\0\1\327\30\0\1\330\41\0\1\331\32\0"+
    "\1\332\22\0\1\333\22\0\1\334\37\0\1\335\22\0"+
    "\1\336\35\0\1\337\22\0\1\340\37\0\1\341\40\0"+
    "\1\342\12\0\1\343\42\0\1\344\16\0\1\345\30\0"+
    "\1\346\43\0\1\347\23\0\1\350\40\0\1\351\23\0"+
    "\1\352\16\0\1\353\37\0\1\354\30\0\1\355\23\0"+
    "\1\356\27\0\1\357\30\0\1\360\41\0\1\361\17\0"+
    "\1\362\30\0\1\363\43\0\1\364\23\0\1\365\40\0"+
    "\1\366\11\0\1\367\37\0\1\370\22\0\1\371\41\0"+
    "\1\372\25\0\1\373\22\0\1\374\41\0\1\375\16\0"+
    "\1\376\37\0\1\377\30\0\1\u0100\21\0\1\u0101\37\0"+
    "\1\u0102\22\0\1\u0103\41\0\1\u0104\17\0\1\u0105\36\0"+
    "\1\u0106\26\0\1\u0107\32\0\1\u0108\30\0\1\u0109\22\0"+
    "\1\u010a\30\0\1\u010b\36\0\1\u010c\26\0\1\u010d\32\0"+
    "\1\u010e\23\0\1\u010f\35\0\1\u0110\30\0\1\u0111\23\0"+
    "\1\u0112\40\0\1\u0113\30\0\1\u0114\25\0\1\u0115\30\0"+
    "\1\u0116\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\73\0\1\11\33\0\1\11\35\0\1\11"+
    "\13\0\1\11\23\0\1\11\11\0\1\11\6\0\1\11"+
    "\13\0\1\11\12\0\1\11\6\0\1\11\10\0\1\11"+
    "\12\0\1\11\3\0\1\11\6\0\1\11\3\0\2\11"+
    "\7\0\1\11\2\0\1\11\2\0\1\11\3\0\2\11"+
    "\1\0\1\11\3\0\1\11\1\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\2\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Parser yyparser;

    /*Constructor que associa o Parser ao Lexer*/
    public Lexer(java.io.Reader r, Parser yyparser){
        this(r);
        this.yyparser = yyparser;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yyparser.yylval = new ParserVal(yytext());
                       return ParserTokens.TEXT;
            }
          case 34: break;
          case 2: 
            { return 1;
            }
          case 35: break;
          case 3: 
            { /* ignore */
            }
          case 36: break;
          case 4: 
            { return ParserTokens.O_TIPO;
            }
          case 37: break;
          case 5: 
            { return ParserTokens.C_TIPO;
            }
          case 38: break;
          case 6: 
            { return ParserTokens.O_SAIDA;
            }
          case 39: break;
          case 7: 
            { return ParserTokens.C_SAIDA;
            }
          case 40: break;
          case 8: 
            { return ParserTokens.O_CARTAO;
            }
          case 41: break;
          case 9: 
            { return ParserTokens.O_ENTRADA;
            }
          case 42: break;
          case 10: 
            { return ParserTokens.C_CARTAO;
            }
          case 43: break;
          case 11: 
            { return ParserTokens.O_TAXA_IVA;
            }
          case 44: break;
          case 12: 
            { return ParserTokens.C_ENTRADA;
            }
          case 45: break;
          case 13: 
            { return ParserTokens.O_OPERADOR;
            }
          case 46: break;
          case 14: 
            { return ParserTokens.C_TAXA_IVA;
            }
          case 47: break;
          case 15: 
            { return ParserTokens.C_OPERADOR;
            }
          case 48: break;
          case 16: 
            { return ParserTokens.O_MATRICULA;
            }
          case 49: break;
          case 17: 
            { return ParserTokens.O_DATA_SAIDA;
            }
          case 50: break;
          case 18: 
            { return ParserTokens.O_TRANSACCAO;
            }
          case 51: break;
          case 19: 
            { return ParserTokens.C_MATRICULA;
            }
          case 52: break;
          case 20: 
            { return ParserTokens.O_HORA_SAIDA;
            }
          case 53: break;
          case 21: 
            { return ParserTokens.O_DATA_DEBITO;
            }
          case 54: break;
          case 22: 
            { return ParserTokens.C_DATA_SAIDA;
            }
          case 55: break;
          case 23: 
            { return ParserTokens.C_TRANSACCAO;
            }
          case 56: break;
          case 24: 
            { return ParserTokens.C_HORA_SAIDA;
            }
          case 57: break;
          case 25: 
            { return ParserTokens.O_IMPORTANCIA;
            }
          case 58: break;
          case 26: 
            { return ParserTokens.O_DATA_ENTRADA;
            }
          case 59: break;
          case 27: 
            { return ParserTokens.C_DATA_DEBITO;
            }
          case 60: break;
          case 28: 
            { return ParserTokens.C_IMPORTANCIA;
            }
          case 61: break;
          case 29: 
            { return ParserTokens.O_HORA_ENTRADA;
            }
          case 62: break;
          case 30: 
            { return ParserTokens.C_DATA_ENTRADA;
            }
          case 63: break;
          case 31: 
            { return ParserTokens.C_HORA_ENTRADA;
            }
          case 64: break;
          case 32: 
            { return ParserTokens.O_VALOR_DESCONTO;
            }
          case 65: break;
          case 33: 
            { return ParserTokens.C_VALOR_DESCONTO;
            }
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
